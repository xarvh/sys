export HISTCONTROL=ignoreboth
export PYTHONSTARTUP=$HOME/.usr/sys/pythonstartup.py

# Colors: http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html
Red="\[\033[00;31m\]"
LightRed="\[\033[01;31m\]"

Green="\[\033[00;32m\]"
LightGreen="\[\033[01;32m\]"

Blue="\[\033[01;34m\]"
Norm="\[\033[00m\]"

PS1=$Green"\u"$LightGreen"@"$Green"\h"$Green" "$Blue"\w"$Green"\$(__git_ps1)"$LightGreen"\$"$Norm" "
unset Red LightRed Green LightGreen Blue Norm


#===================================================================
# CLIPBOARD / SELECTION
#
function clipboard_files {
  for i in $(xsel --clipboard) $(xsel --primary); do
    if [ -f $i ]; then
      echo "$i"
    fi
  done
}

function arg_or_clipboard {
  if [ "$1" == "" ]
  then echo "$(xsel --clipboard)"
  else echo $1
  fi
}

function search_package_contents {
  if [ "$1" != "" ]; then
    _browser "http://packages.ubuntu.com/search?searchon=contents&keywords=$1&mode=exactfilename&suite=wily"
  fi
}

#===================================================================
# ALIASES
#
alias yarn=yarnpkg

alias br=_browser
alias psi='ps -edaf |grep -i'
alias ls='ls -1 --human-readable --color=auto'
alias grep='grep --color=auto'
alias gri='grep --color=auto --ignore-case'
alias yd='youtube-dl --prefer-free-formats -o "%(title)s-%(id)s.%(ext)s"'
#alias dos='dosbox -c MOUNT . c'
#alias s2b='ussp-push GT-I9300@ "$1" "$(basename $1)"'
#alias xcsf='echo "Job finished at\n$(pwd)" |xcowsay -t 99999'

alias mp='m_playlist.sh'
alias md='m_playlist.sh --sort'
alias mr='m_playlist.sh --new'
alias ml='playlist.player $HOME/.playlist'

alias em='reset; elm-make --yes'
alias er='elm reactor'
function ei {
    for i in $@; do
        elm install $i
    done
}

function bk {
    tar -cjf `date +$1%Y%m%d$2.tbz` $1/
}

alias pinstall='sudo apt install'
alias psearch='apt-cache search'
alias premove='sudo apt --purge remove'
alias pupgrade='sudo apt update; sudo apt upgrade; sudo apt --purge autoremove'
alias psizes='dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n'
alias pcontents='search_package_contents'

alias rmrm="rm -r"
alias dd="du -sh"
alias pp="python -B"
alias -- -="cd -"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

alias cpu_performance='sudo $HOME/.usr/scripts/scale_cpu performance'
alias cpu_conservative='sudo $HOME/.usr/scripts/scale_cpu conservative'

alias executables='IFS=':'; for i in $PATH; do ls $i; done'
alias homebrowser='env HOME=$(pwd) _browser &'

alias ff='find * |grep -v node_modules/ |grep -v elm-stuff |grep --ignore-case'
#alias v='neovide'
function v { neovide $@ >/dev/null 2>/dev/null & }
alias vv='xargs neovide &'
alias s='sxiv * &'
alias q='qiv -mI * &'
alias proddatabase='nautilus --no-desktop smb://storage.adslot.com/ProdDataBases &'
function ev { evince "$@" & }
function www { wget $(arg_or_clipboard $1) ;}
function show { cat $(which $1) ;}
function yo {
  echo to upgrade: sudo pip install --upgrade youtube_dl
  NAME="$(arg_or_clipboard $1)"
  X=${NAME#*v=}
  CODE=${X%%&*}
  youtube-dl -x --audio-format=wav "$NAME"
  echo $(ls *wav |grep $CODE)
  lame -v "$(ls *wav |grep $CODE)"
  mv "$(ls *mp3 |grep $CODE)" $HOME/Musica/new/good/
  rm "$(ls *wav |grep $CODE)"
}


#===================================================================
# GIT ALIASES
#
alias gl='git log HEAD~2.. --pretty=format: --name-only | sort | uniq'
alias ga='git add'
alias gd='git diff'
alias gdc='git diff --cached'
alias gs='git status'
alias gb='git branch'
alias gco='git checkout'
alias gcm='git commit -m'
alias gpo='git push origin'
alias gpoh='git push origin HEAD'
alias gpFo='git push origin'
alias gpr='git pull --rebase'
alias gp='git push'
alias gsu='git submodule update'

alias grc='git rebase --continue'
alias gra='git rebase --abort'
alias grom='git rebase origin/master'
alias grod='git rebase origin/develop'
alias gr-i='git rebase -i `git log --oneline |grep "Merge pull request" |head -n1 | cut -f1 -d" "`'

source $HOME/.usr/sys/git-prompt
source $HOME/.usr/sys/git-completion
source $HOME/.usr/sys/git-completion-aliases

unalias gpFo
function gpFo {
  if [ "$1" = 'master' ]; then
    echo 'HELL NO'
  elif [ "$1" != $(git rev-parse --abbrev-ref HEAD) ]; then
    echo Wrong branch
  else
    git push -f origin $1
  fi
}
